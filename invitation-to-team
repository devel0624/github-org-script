#!/usr/bin/env bash

# 깃허브 조직의 팀 정보 조회
ORG=$(./read-properties -n ORG -f ./github-org.properties -d "=")
TOKEN=$(./read-properties -n YOUR_TOKEN -f ./github-org.properties -d "=")

team_id=10888815

MANUAL='Usage: read-properties [-n name] [-f file] [-d delimiter] [-h]
Options:
  -f\t file \t\t property file path
  -a\t address \t 단일 초대 전송 대상
  -h\t\t\t show this help message'

DEBUG_MSG=""
verbose=0
# 빈 배열 선언
declare -a EMAIL_LIST

while getopts f:a:hv opt
do
    case $opt in
        f) DEBUG_MSG="$DEBUG_MSG file value : $OPTARG\n"; EMAIL_LIST_FILE=$OPTARG;;
        a) DEBUG_MSG="$DEBUG_MSG address value : $OPTARG\n"; EMAIL_LIST+=("$OPTARG");;
        h) printf "$MANUAL"; exit 0 ;;
        v) verbose=1;;  
        *) printf "$opt is not the option"; exit 1 ;;
    esac
done

# 이메일 파일 경로, 마지막 줄은 읽히지 않으니 EOF 준수할 것

if [ -z "$EMAIL_LIST_FILE" ]; then
    if [ ${#EMAIL_LIST[@]} -eq 0 ]; then
        ERROR_MSG="${EMAIL_FILE}Warning: -f 옵션으로 파일을 지정해주세요.\n"
    fi
else
    if [ ! -f "$EMAIL_LIST_FILE" ]; then
        ERROR_MSG="${EMAIL_LIST_FILE} 파일이 존재하지 않습니다. 파일 경로를 확인해주세요.\n"
    else
        EMAIL_FILE=$EMAIL_LIST_FILE
    fi
fi

# 경고 메시지 출력 및 스크립트 종료
if [ -z "$ORG" ]; then
  ERROR_MSG="${ERROR_MSG}Warning: ORG 변수가 제대로 할당되지 않음 스크립트 확인 필요.\n"
fi

if [ -z "$TOKEN" ]; then
  ERROR_MSG="${ERROR_MSG}Warning: TOKEN 변수가 제대로 할당되지 않음 스크립트 확인 필요.\n"
fi

if [ $verbose -eq 1 ]; then
    echo $ORG
    echo $TOKEN
fi

# 경고 메시지가 있으면 출력하고 종료
if [ -n "$ERROR_MSG" ]; then
  printf "$ERROR_MSG" >&2
  exit 1
fi



##### 이하 초대 진행

# 이메일 파일에서 한 줄씩 읽어서 배열에 추가
while IFS= read -r email; do
    # 이메일 주소가 비어 있지 않은 경우만 추가
    if [[ -n "$email" ]]; then
        EMAIL_LIST+=("$email")
    fi
done < "$EMAIL_FILE"

if [ ${#EMAIL_LIST[@]} -eq 0 ]; then
    echo "초대 요청 목록이 비어있습니다. 확인 바랍니다." ; exit 1;
fi

INVITE_DEBUG_LOG_PATH=$(dirname "$0")/logs/invite-org-team-debug.log

# 배열 요소 출력
echo "---전체 요청 시작"
count=0
for email in "${EMAIL_LIST[@]}"; do
    echo "$email 에 초대 요청 보내는 중..."
    DEBUG_MSG=""
    DEBUG_MSG="$DEBUG_MSG $(date +'%Y-%m-%d %H:%M:%S')"
    DEBUG_MSG="$DEBUG_MSG 에 실행된 Github 조직 초대 API 호출, 디버그 기록"

    echo "-----" >> $INVITE_DEBUG_LOG_PATH
    echo $DEBUG_MSG >> $INVITE_DEBUG_LOG_PATH
    echo "초대한 팀의 id : $team_id" >> $INVITE_DEBUG_LOG_PATH
    echo "초대 요청을 보낸 이메일 : $email" >> $INVITE_DEBUG_LOG_PATH

    curl -L \
        -X POST \
        -H "Accept: application/vnd.github+json" \
        -H "Authorization: Bearer $TOKEN" \
        -H "X-GitHub-Api-Version: 2022-11-28" \
        https://api.github.com/orgs/$ORG/invitations \
        -d '{"email":"'$email'","role":"direct_member","team_ids":['$team_id']}' >> $INVITE_DEBUG_LOG_PATH
    ((count++))
    echo "$count 번째 요청 완료" >> $INVITE_DEBUG_LOG_PATH
done

echo "총 요청 $count 회 완료. 자세한 요청과 응답은 debug.log 를 확인하세요."